name: Deploy with Tailscale

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Build application
      run: |
        mvn clean package -DskipTests -Dspring.profiles.active=prod
    
    - name: Build Docker image
      run: |
        docker build -t task-management:latest .
        docker save task-management:latest > task-management.tar
    
    # Connect to Tailscale network
    - name: Connect to Tailscale
      uses: tailscale/github-action@v2
      with:
        authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
    
    # Now you can use Tailscale IP directly
    - name: Deploy to server via Tailscale  
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.TAILSCALE_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "task-management.tar,docker-compose.prod.yml"
        target: "/tmp/"
        debug: true
    
    - name: Deploy application
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.TAILSCALE_SERVER_IP }}  # Use Tailscale IP here
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        envs: POSTGRESQL_PASSWORD,JWT_SECRET_KEY
        script: |
          cd /opt/task-management
          
          # Load new Docker image
          docker load < /tmp/task-management.tar
          
          # Update docker-compose file
          cp /tmp/docker-compose.prod.yml ./docker-compose.prod.yml
          
          # Update .env file with secrets from GitHub
          echo "POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD" > .env.secrets
          echo "JWT_SECRET_KEY=$JWT_SECRET_KEY" >> .env.secrets
          
          # Restart application
          docker-compose -f docker-compose.prod.yml --env-file .env --env-file .env.secrets down
          docker-compose -f docker-compose.prod.yml --env-file .env --env-file .env.secrets up -d
          
          # Clean up secrets file
          rm -f .env.secrets
          
          # Health check
          sleep 30
          curl -f http://localhost:8080/actuator/health
      env:
        POSTGRESQL_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}